import { Telegraf, session, Context } from 'telegraf';
import { type CallbackQuery } from 'telegraf/types';
import dotenv from 'dotenv';
import { projects, type Project } from './projectsConfig';
import { airdropWorker } from './airdropWorker';
import { userDb, UserRole } from './database';
import { auditLogger } from './audit';
import { validateAddress, getAddressTypeDisplay } from './addressTypes';

// Load environment variables from .env.local
dotenv.config({ path: '.env.local' });

interface SessionData {
  promptMessageId?: number;
  selectedProject?: Project;
}

interface MyContext extends Context {
  session: SessionData;
}

// Use the bot token from the environment variable
const bot = new Telegraf<MyContext>(process.env.TELEGRAM_BOT_TOKEN as string);

// Add session middleware before other uses
bot.use(session());

// Constant for the maximum number of addresses
const MAX_ADDRESSES = 80;

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞
const requireAdmin = async (ctx: MyContext, next: () => Promise<void>) => {
  const userId = ctx.from?.id;
  if (!userId || !userDb.isAdmin(userId)) {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
    return;
  }
  return next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –æ–≤–Ω–µ—Ä–∞
const requireOwner = async (ctx: MyContext, next: () => Promise<void>) => {
  const userId = ctx.from?.id;
  if (!userId || !userDb.isOwner(userId)) {
    await ctx.reply('–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –±–æ—Ç–∞ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.');
    return;
  }
  return next();
};

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–≤–Ω–µ—Ä–∞)
bot.command('addadmin', requireOwner, async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length !== 2) {
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id>');
    return;
  }

  const targetUserId = parseInt(args[1]);
  if (isNaN(targetUserId)) {
    await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  userDb.setUserRole(targetUserId, UserRole.ADMIN);
  await auditLogger.logAdminAction(
    ctx.from.id,
    ctx.from.username,
    '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞',
    targetUserId
  );
  await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–≤–Ω–µ—Ä–∞)
bot.command('removeadmin', requireOwner, async (ctx) => {
  const args = ctx.message.text.split(' ');
  if (args.length !== 2) {
    await ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin <user_id>');
    return;
  }

  const targetUserId = parseInt(args[1]);
  if (isNaN(targetUserId)) {
    await ctx.reply('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  userDb.removeUserRole(targetUserId);
  await ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${targetUserId} –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`);
});

// –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã –∫–∞–∫ –∫–∞–Ω–∞–ª–∞ –∞—É–¥–∏—Ç–∞
bot.command('setauditgroup', requireOwner, async (ctx) => {
  if (!ctx.chat) return;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø—É/—Å—É–ø–µ—Ä–≥—Ä—É–ø–ø—É
  if (ctx.chat.type !== 'group' && ctx.chat.type !== 'supergroup') {
    await ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ');
    return;
  }

  auditLogger.setAuditChannel(ctx.chat.id.toString());
  await ctx.reply('‚úÖ –≠—Ç–∞ –≥—Ä—É–ø–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–∫ –∫–∞–Ω–∞–ª –∞—É–¥–∏—Ç–∞');
  
  // –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  await auditLogger.logAdminAction(
    ctx.from.id,
    ctx.from.username,
    '–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥—Ä—É–ø–ø—ã –∞—É–¥–∏—Ç–∞',
    ctx.from.id
  );
});

// –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.command('stats', requireAdmin, async (ctx) => {
  const stats = userDb.getStats();
  
  let message = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üëÆ‚Äç‚ôÇÔ∏è –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: ${stats.admins}
üë§ –û–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.users}
üîç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–¥—Ä–µ—Å–æ–≤: ${stats.totalChecks}`;

  if (stats.topUsers.length > 0) {
    message += '\n\nüìà –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ–≤–µ—Ä–æ–∫:';
    for (const user of stats.topUsers) {
      const userDisplay = user.username ? `@${user.username}` : `ID: ${user.userId}`;
      message += `\n${userDisplay}: ${user.checks} –ø—Ä–æ–≤–µ—Ä–æ–∫`;
    }
  }

  await ctx.reply(message);
});

// Start command
bot.start(async (ctx) => {
  if (ctx.from) {
    userDb.addUser(ctx.from.id, ctx.from.username);
    
    await auditLogger.logSystemEvent(
      ctx.from.id,
      ctx.from.username,
      '–ù–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞'
    );
  }
  
  sendProjectList(ctx);
});

// Function to send the list of projects
async function sendProjectList(ctx: MyContext) {
  await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ airdrop:', {
    reply_markup: {
      inline_keyboard: [projects.map((project) => ({
        text: project.name,
        callback_data: `project:${project.name}`,
      }))],
    },
  });
}

// Type guard to check if callbackQuery is of type CallbackQuery.DataQuery
function isDataQuery(query: CallbackQuery): query is CallbackQuery.DataQuery {
  return (query as CallbackQuery.DataQuery).data !== undefined;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
async function handleError(ctx: MyContext, errorMessage: string) {
  // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await ctx.deleteMessage();
  
  // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—à–∏–±–∫–æ–π
  await ctx.telegram.editMessageText(
    ctx.chat!.id,
    ctx.session.promptMessageId,
    undefined,
    errorMessage,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
        ]
      }
    }
  );
}

// Handle text messages and documents with addresses
async function handleAddresses(ctx: MyContext, addresses: string[], project: Project) {
  if (!ctx.chat || !ctx.from) return;
  
  // Remove duplicates
  const uniqueAddresses = [...new Set(addresses.map(addr => addr.trim().toLowerCase()))];
  
  if (uniqueAddresses.length > MAX_ADDRESSES) {
    await handleError(ctx, 
      `‚ö†Ô∏è –í—ã –≤–≤–µ–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ –±–æ–ª–µ–µ ${MAX_ADDRESSES} –∞–¥—Ä–µ—Å–æ–≤.`
    );
    return;
  }

  // Validate addresses
  const validationResults = uniqueAddresses.map(address => ({
    address,
    isValid: validateAddress(address, project.addressType)
  }));

  const validAddresses = validationResults.filter(r => r.isValid).map(r => r.address);
  const invalidAddresses = validationResults.filter(r => !r.isValid).map(r => r.address);

  if (validAddresses.length === 0) {
    await handleError(ctx, '‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.');
    return;
  }

  // Add audit log
  await auditLogger.logAddressCheck(
    ctx.from.id,
    ctx.from.username,
    project.name,
    validAddresses.length
  );

  await ctx.deleteMessage();

  const results = await Promise.all(validAddresses.map(address => 
    airdropWorker.addTask(project, address)
      .then((airdropAmount: string) => ({ address, airdropAmount, error: false }))
      .catch(() => ({ address, airdropAmount: '0', error: true }))
  ));

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const eligible = results.filter(r => !r.error && r.airdropAmount !== '0');
  const notEligible = results.filter(r => !r.error && r.airdropAmount === '0');
  const errors = results.filter(r => r.error);

  let responseMessage = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è ${project.name}:\n\n`;
  
  if (eligible.length > 0) {
    responseMessage += '‚úÖ Eligible:\n';
    eligible.forEach(r => {
      responseMessage += `${r.address}: ${r.airdropAmount}\n`;
    });
    responseMessage += '\n';
  }

  if (notEligible.length > 0) {
    responseMessage += '‚ùå Not Eligible:\n';
    notEligible.forEach(r => {
      responseMessage += `${r.address}\n`;
    });
    responseMessage += '\n';
  }

  if (errors.length > 0) {
    responseMessage += '‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏:\n';
    errors.forEach(r => {
      responseMessage += `${r.address}\n`;
    });
    responseMessage += '\n';
  }

  if (invalidAddresses.length > 0) {
    responseMessage += 'üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞–¥—Ä–µ—Å–∞:\n';
    invalidAddresses.forEach(address => {
      responseMessage += `${address}\n`;
    });
  }
  
  await ctx.telegram.editMessageText(
    ctx.chat.id,
    ctx.session.promptMessageId,
    undefined,
    responseMessage,
    {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
        ]
      }
    }
  );

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–æ–≤
  ctx.session.selectedProject = undefined;

  // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
  userDb.incrementAddressChecks(ctx.from.id);
}

// Handle project selection and back button
bot.on('callback_query', async (ctx) => {
  if (!ctx.callbackQuery) return;
  const callbackQuery = ctx.callbackQuery;
  
  if (!isDataQuery(callbackQuery)) return;

  const data = callbackQuery.data;
  
  // Handle back button
  if (data === 'back') {
    ctx.session.selectedProject = undefined;  // –û—á–∏—â–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç
    await ctx.editMessageText('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—á–∞—Å—Ç–∏—è –≤ airdrop:', {
      reply_markup: {
        inline_keyboard: [projects.map((project) => ({
          text: project.name,
          callback_data: `project:${project.name}`,
        }))],
      },
    });
    return;
  }

  // Handle project selection
  if (data.startsWith('project:')) {
    const projectName = data.replace('project:', '');
    const project = projects.find((p) => p.name === projectName);

    if (project) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏
      ctx.session = {
        promptMessageId: callbackQuery.message?.message_id,
        selectedProject: project
      };

      const addressTypeText = getAddressTypeDisplay(project.addressType);

      await ctx.editMessageText(
        `–í—ã –≤—ã–±—Ä–∞–ª–∏ ${project.name}.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ${addressTypeText} (–∫–∞–∂–¥—ã–π –∞–¥—Ä–µ—Å –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –º–∞–∫—Å–∏–º—É–º ${MAX_ADDRESSES}) –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Ñ–∞–π–ª–æ–º:`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back' }]
            ]
          }
        }
      );
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
  if (ctx.message.text.startsWith('/')) return;

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
  await auditLogger.logMessage(
    ctx.from.id,
    ctx.from.username,
    ctx.message.text
  );

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–¥—Ä–µ—Å–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç
  if (ctx.session?.selectedProject) {
    const addresses = ctx.message.text.split('\n').map((addr: string) => addr.trim()).filter((addr: string) => addr);
    await handleAddresses(ctx, addresses, ctx.session.selectedProject);
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
bot.on('document', async (ctx) => {
  // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Ñ–∞–π–ª–∞
  await auditLogger.logMessage(
    ctx.from.id,
    ctx.from.username,
    `[–§–∞–π–ª: ${ctx.message.document.file_name || '–±–µ–∑ –∏–º–µ–Ω–∏'}]`
  );

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø—Ä–æ–µ–∫—Ç
  if (ctx.session?.selectedProject) {
    if (ctx.message.document.mime_type !== 'text/plain') {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª (.txt)');
      return;
    }

    try {
      const file = await ctx.telegram.getFile(ctx.message.document.file_id);
      const fileUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;
      const response = await fetch(fileUrl);
      const text = await response.text();
      
      const addresses = text.split('\n').map(addr => addr.trim()).filter(addr => addr);
      await handleAddresses(ctx, addresses, ctx.session.selectedProject);
    } catch (error) {
      console.error('File reading error:', error);
      await ctx.reply('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∞–¥—Ä–µ—Å–∞–º–∏.');
    }
  }
});

// Enable graceful stop
process.once('SIGINT', () => {
  auditLogger.logSystemEvent(0, undefined, 'üîÑ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGINT)').finally(() => {
    bot.stop('SIGINT');
  });
});

process.once('SIGTERM', () => {
  auditLogger.logSystemEvent(0, undefined, 'üîÑ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (SIGTERM)').finally(() => {
    bot.stop('SIGTERM');
  });
});

// –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
auditLogger.logSystemEvent(
  0,
  undefined,
  `ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω${process.env.COMMIT_HASH ? ` (${process.env.COMMIT_HASH})` : ''}`
);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
async function checkVersionUpdate() {
  const currentHash = process.env.COMMIT_HASH;
  if (!currentHash) return;

  const savedHash = userDb.getCommitHash();
  
  // –ï—Å–ª–∏ —Ö—ç—à –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
  if (savedHash !== currentHash) {
    const commitMessage = process.env.COMMIT_MESSAGE || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è';
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    await auditLogger.logSystemEvent(
      0,
      undefined,
      `üÜï –ë–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ –≤–µ—Ä—Å–∏–∏ ${currentHash}\nüìù –ò–∑–º–µ–Ω–µ–Ω–∏—è: ${commitMessage}`
    );
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π —Ö—ç—à
    userDb.setCommitHash(currentHash);
  }
}

// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch()
  .then(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    return checkVersionUpdate();
  })
  .catch(error => {
    console.error('Failed to start bot:', error);
  });